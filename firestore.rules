rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId} {
      // isOwner helper function abstracts the complex logic
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isSignedIn helper function abstracts the complex logic
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy.

      // Self-creation: User can create their own profile.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Only the owner can update. Enforce immutable id.
      allow update: if isOwner(userId);

      // Only the owner can delete their profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures documents uploaded by the user. Only the owner can read/write their own documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures flashcards generated from documents. Only the owner can read/write their own flashcards.
     * @path /users/{userId}/documents/{documentId}/flashcards/{flashcardId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/documents/{documentId}/flashcards/{flashcardId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures past year question files uploaded by the user. Only the owner can read/write their own past year question files.
     * @path /users/{userId}/past_year_questions/{pastYearQuestionId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/past_year_questions/{pastYearQuestionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures study timetables generated by the user. Only the owner can read/write their own timetables.
     * @path /users/{userId}/timetables/{timetableId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/timetables/{timetableId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures to-do tasks created by the user. Only the owner can read/write their own to-do tasks.
     * @path /users/{userId}/todo_tasks/{todoTaskId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/todo_tasks/{todoTaskId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures voice-to-text notes created by the user. Only the owner can read/write their own voice notes.
     * @path /users/{userId}/voice_notes/{voiceNoteId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/voice_notes/{voiceNoteId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures game scores recorded by the user. Only the owner can read/write their own game scores.
     * @path /users/{userId}/game_scores/{gameScoreId}
     * @allow (create, update, get, list, delete) if the user is the owner.
     * @deny (create, update, get, list, delete) if the user is not the owner.
     * @principle Enforces document ownership and authenticated access.
     */
    match /users/{userId}/game_scores/{gameScoreId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}