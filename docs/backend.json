{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "college": {
          "type": "string",
          "description": "User's college or university."
        },
        "degree": {
          "type": "string",
          "description": "User's degree program."
        },
        "summary": {
          "type": "string",
          "description": "A brief biography or summary of the user."
        },
        "projects": {
          "type": "string",
          "description": "A markdown-style list of user's projects."
        },
        "hobbies": {
          "type": "string",
          "description": "User's hobbies and interests."
        },
        "skills": {
          "type": "string",
          "description": "User's skills."
        },
        "profileImageURL": {
          "type": "string",
          "description": "URL of the user's profile image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a document uploaded by the user, along with its summary and flashcards.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Document entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Document)"
        },
        "filename": {
          "type": "string",
          "description": "Name of the uploaded file."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date and time when the document was uploaded.",
          "format": "date-time"
        },
        "summary": {
          "type": "string",
          "description": "Summary of the document generated by Gemini API."
        },
        "flashcardIds": {
          "type": "array",
          "description": "References to Flashcards. (Relationship: Document 1:N Flashcard)",
          "items": {
            "type": "string"
          }
        },
        "flowchart": {
          "type": "string",
          "description": "Flowchart generated from document, if possible."
        }
      },
      "required": [
        "id",
        "userId",
        "filename",
        "uploadDate",
        "summary"
      ]
    },
    "Flashcard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Flashcard",
      "type": "object",
      "description": "Represents a flashcard generated from a document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Flashcard entity."
        },
        "documentId": {
          "type": "string",
          "description": "Reference to Document. (Relationship: Document 1:N Flashcard)"
        },
        "question": {
          "type": "string",
          "description": "Question on the flashcard."
        },
        "answer": {
          "type": "string",
          "description": "Answer to the question on the flashcard."
        }
      },
      "required": [
        "id",
        "documentId",
        "question",
        "answer"
      ]
    },
    "PYQAnswer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PYQAnswer",
      "type": "object",
      "description": "Represents an answer generated for a past year question.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the PYQAnswer entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N PYQAnswer)"
        },
        "question": {
          "type": "string",
          "description": "The question from the past year paper."
        },
        "answer": {
          "type": "string",
          "description": "Detailed answer generated by Gemini."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date and time when the PYQ answer was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "question",
        "answer",
        "uploadDate"
      ]
    },
    "Timetable": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Timetable",
      "type": "object",
      "description": "Represents a study timetable generated for the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Timetable entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Timetable)"
        },
        "subjects": {
          "type": "string",
          "description": "Subjects included in the timetable, in JSON format."
        },
        "totalStudyHours": {
          "type": "number",
          "description": "Total study hours allocated in the timetable."
        },
        "generatedDate": {
          "type": "string",
          "description": "Date and time when the timetable was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "subjects",
        "totalStudyHours",
        "generatedDate"
      ]
    },
    "TodoTask": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TodoTask",
      "type": "object",
      "description": "Represents a task in the user's to-do list.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TodoTask entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N TodoTask)"
        },
        "title": {
          "type": "string",
          "description": "Title of the task."
        },
        "deadline": {
          "type": "string",
          "description": "Deadline for the task.",
          "format": "date-time"
        },
        "completed": {
          "type": "boolean",
          "description": "Indicates whether the task is completed or not."
        }
      },
      "required": [
        "id",
        "userId",
        "title",
        "deadline",
        "completed"
      ]
    },
    "VoiceNote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VoiceNote",
      "type": "object",
      "description": "Represents a voice note created by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the VoiceNote entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N VoiceNote)"
        },
        "text": {
          "type": "string",
          "description": "Text transcribed from the voice note."
        },
        "createdDate": {
          "type": "string",
          "description": "Date and time when the voice note was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "text",
        "createdDate"
      ]
    },
    "GameScore": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameScore",
      "type": "object",
      "description": "Represents a user's score in a brain game.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the GameScore entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N GameScore)"
        },
        "gameName": {
          "type": "string",
          "description": "Name of the game."
        },
        "score": {
          "type": "number",
          "description": "User's score in the game."
        },
        "playedDate": {
          "type": "string",
          "description": "Date and time when the game was played.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "gameName",
        "score",
        "playedDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. The 'userId' parameter identifies the user who owns this profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores documents uploaded by the user. The 'userId' parameter identifies the owner of the document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "documentId",
              "description": "The unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/documents/{documentId}/flashcards/{flashcardId}",
        "definition": {
          "entityName": "Flashcard",
          "schema": {
            "$ref": "#/backend/entities/Flashcard"
          },
          "description": "Stores flashcards generated from a specific document. The 'userId' parameter identifies the owner, and 'documentId' links to the parent document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "documentId",
              "description": "The unique identifier for the document."
            },
            {
              "name": "flashcardId",
              "description": "The unique identifier for the flashcard."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/pyqAnswers/{pyqAnswerId}",
        "definition": {
          "entityName": "PYQAnswer",
          "schema": {
            "$ref": "#/backend/entities/PYQAnswer"
          },
          "description": "Stores answers generated for past year questions. The 'userId' parameter identifies the user who created the answer.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "pyqAnswerId",
              "description": "The unique identifier for the PYQ answer."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/timetables/{timetableId}",
        "definition": {
          "entityName": "Timetable",
          "schema": {
            "$ref": "#/backend/entities/Timetable"
          },
          "description": "Stores study timetables generated for the user. The 'userId' parameter identifies the owner of the timetable.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "timetableId",
              "description": "The unique identifier for the timetable."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/todoTasks/{todoTaskId}",
        "definition": {
          "entityName": "TodoTask",
          "schema": {
            "$ref": "#/backend/entities/TodoTask"
          },
          "description": "Stores tasks in the user's to-do list. The 'userId' parameter identifies the user who created the task.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "todoTaskId",
              "description": "The unique identifier for the to-do task."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/voiceNotes/{voiceNoteId}",
        "definition": {
          "entityName": "VoiceNote",
          "schema": {
            "$ref": "#/backend/entities/VoiceNote"
          },
          "description": "Stores voice notes created by the user. The 'userId' parameter identifies the user who created the voice note.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "voiceNoteId",
              "description": "The unique identifier for the voice note."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/gameScores/{gameScoreId}",
        "definition": {
          "entityName": "GameScore",
          "schema": {
            "$ref": "#/backend/entities/GameScore"
          },
          "description": "Stores the user's scores in brain games. The 'userId' parameter identifies the user who played the game.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "gameScoreId",
              "description": "The unique identifier for the game score."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily manageable data storage solution for the \"Noether\" application. The structure emphasizes authorization independence through denormalization and structural segregation, ensuring clear security rules and efficient data access. All data for individual users are stored under their respective user ID to maintain privacy and data ownership. The structure facilitates straightforward security rules, enabling secure 'list' operations and maintaining the integrity of ownership, timestamps, and denormalized data.\n\nAuthorization Independence is achieved primarily via path-based ownership.  For example, all documents, flashcards, PYQ answers, timetables, to-do tasks, voice notes, and game scores are stored under `/users/{userId}`, thus eliminating the need for complex `get()` calls in security rules. The structure implicitly enforces ownership. The structure also supports QAPs by segregating user data and using path-based ownership, guaranteeing that list operations are secure and only return data accessible to the requesting user.\n"
  }
}